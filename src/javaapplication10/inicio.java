/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication10;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart .JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
/**
 *
 * @author Faxx
 */
public class inicio extends javax.swing.JFrame {
static int Cont1=0,Contdatos=0; 
static datos datosGRA[]=new datos[1];
static datos aux[]=new datos[1];
static String title;
 
    /**
     * Creates new form inicio
     */
    public inicio() {
        initComponents();
        buttonGroup1.add(asc);
        buttonGroup1.add(des);
        buttonGroup2.add(quick);
        buttonGroup2.add(sort);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        quick = new javax.swing.JRadioButton();
        sort = new javax.swing.JRadioButton();
        asc = new javax.swing.JRadioButton();
        des = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        repor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Examinar...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Generar grafica");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("Ordenar");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        quick.setText("Quicksort");

        sort.setText("Bubblesort");
        sort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortActionPerformed(evt);
            }
        });

        asc.setText("Ascendente");
        asc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ascActionPerformed(evt);
            }
        });

        des.setText("Descendente");
        des.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desActionPerformed(evt);
            }
        });

        jLabel1.setText("Ubicaci√≥n del archivo");

        jLabel2.setText("Nombre de la Grafica");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 346, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 348, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        repor.setText("Reporte");
        repor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(des)
                            .addComponent(asc)
                            .addComponent(sort)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jToggleButton1))
                            .addComponent(quick)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(repor))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addComponent(jButton1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)))
                .addContainerGap(116, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(des)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(asc)
                        .addGap(31, 31, 31)
                        .addComponent(sort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quick)
                        .addGap(13, 13, 13)
                        .addComponent(jToggleButton1)
                        .addGap(132, 132, 132)
                        .addComponent(repor)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File F =chooser.getSelectedFile();
        String filename=F.getAbsolutePath();
        jTextField1.setText(filename);             // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String leerruta=jTextField1.getText().trim();
         
         if (jTextField2.getText().equals("")) {
             JOptionPane.showMessageDialog(null, "Debe llenar todos los Campos");//Mensaje por si faltan el nombre de la grafica
         } else {
           try {
                    
                    FileReader fr=new FileReader(leerruta);
                    BufferedReader br=new BufferedReader(fr);
                    
                    String linea;
                    while ((linea=br.readLine())!= null) {
                       Cont1++;  
                    }
                    
                    System.out.println("La cantidad de valores es:"+ Cont1);
                    datosGRA=new datos[Cont1];
                    aux=new datos[Cont1];
                    System.out.println("Tama√±o determinado: "+datosGRA.length);
                    
                    FileReader LR=new FileReader(leerruta);
                   BufferedReader bF=new BufferedReader(LR);
                   
                   String linea2;
                    while ((linea2=bF.readLine())!= null) {
                       String [] datos2=linea2.split(",");
                       String CATEGO=datos2[0];
                       String CANTI=datos2[1];
                      datosGRA[Contdatos]=new datos(CATEGO, CANTI);
                      aux[Contdatos]=new datos(CATEGO, CANTI);
                       Contdatos++;         
                      
                    }
        
                } catch (Exception e2) {
                  e2.getStackTrace();
                }
                
                 for (int i = 0; i <datosGRA.length-1; i++) {
                        System.out.println("Categoria:"+ datosGRA[i].getcategoria());
                        System.out.println("Cantidad:"+ datosGRA[i].getcantidad());
                        System.out.println("-                                      -");
                    }
                 System.out.println("El segundo contador es: "+Contdatos);
  
   JFreeChart barras=null;
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
       String Y =datosGRA[0].getcantidad();
       String X =datosGRA[0].getcategoria();
        title=jTextField2.getText();
        for (int i = 1; i < datosGRA.length-1; i++) {
        float cantidad=Float.parseFloat(datosGRA[i].getcantidad());
        String categoria=datosGRA[i].getcategoria();
        datos.addValue(cantidad, "", categoria);
    }
      
       barras=ChartFactory.createBarChart(title, X, Y, datos, PlotOrientation.VERTICAL, true,true,false);
      
       ChartPanel panel = new ChartPanel(barras);
       panel.setPreferredSize(new Dimension(400,200));
       jPanel1.setLayout(new BorderLayout());
       jPanel1.add(panel,BorderLayout.NORTH);
                pack();
                repaint();
       try {
            BufferedImage imagen4 = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_ARGB);

            jPanel1.paint(imagen4.getGraphics());
            ImageIO.write(imagen4, "png", new File("inicial.png"));
        } catch (Exception e) {
        }
         }
    }
    private void ordActionPerformed(java.awt.event.ActionEvent evt) {                                    
       //se
       // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void reporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporActionPerformed
        String metodo="";
        if(sort.isSelected()){
        metodo = "Bubblesort";}
        else if(quick.isSelected()){
        metodo = "Quicksort";}
        
        String orden="";
        if(asc.isSelected()){
        orden = "Ascendente";}
        else if(quick.isSelected()){
        orden = "Descendente";}
        try {

            String ruta = jTextField2.getText()+".html";
            PrintWriter writer = new PrintWriter(ruta, "UTF-8");
            writer.println("<!DOCTYPE HTML>");
            writer.println("<html>");
            writer.println("<head>");
            writer.println("<meta charset= " + " utf-8 " + " > ");
            writer.println("<title>Reporte: datos </title>");

            writer.println("</head>");

            writer.println("<body bgcolor= " + " gray " + "text=" + "white" + ">");

            writer.println("<h1 "+ " align= " + "center" + ">" + "Reporte de datos</h1>");

            writer.println("<h2 "+ " align= " + "right" + ">" + " Nombre: Diego Facundo P√©rez Nicolau,   Carnet: 202106538</h2>");
            writer.println("<hr "+ "align = " + " center" + " size = " + "4" + " width ="+ " 100% " + "color= " +" White" + " noshade>");
            writer.println("<br>");

            
            writer.println("<pre>"+"  Metodo de Ordenamiento : "+ metodo+ "               Tiempo :"+jTextField2.getText() + 
                    "               Velocidad : "+ jTextField2.getText()+ "                Movimientos :"+Contdatos + "               Orden : "+ orden);
            writer.println("<br>");
            writer.println("<hr "+ "align = " + " center" + " size = " + "4" + " width ="+ " 100% " + "color= " +" White" + " noshade>");

            if (jTextField2.getText().equalsIgnoreCase("ascendente")) {
                String CatminA = datosGRA[1].getcantidad();
                String CantminA = datosGRA[1].getcategoria();
                String CatmaxA = datosGRA[Contdatos - 1].getcantidad();
                String CantmaxA = datosGRA[Contdatos - 1].getcategoria();

                writer.println("<div>");
                writer.println("<div style='float: left; margin: 0px 200px 0px 300px; padding: 10px; text-align: left; '>");
                writer.println("<table BORDER WIDTH=180% >");
                writer.println("<tr>");
                writer.println("<td>Dato menor</td>");
                writer.println("</tr>");
                writer.println("<tr>");
                writer.println("<td>");
                writer.println("<table>");
                writer.println("<tr>");
                writer.println("<td>"+CantminA+"</td>");
                writer.println("<td>"+CatminA+"</td>");
                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</td>");

                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</div>");
                writer.println("<div style='float: right; margin: -20px 400px 300px 10px; padding: 10px; text-align: left; '>");
                writer.println("<table BORDER WIDTH=180%>");
                writer.println("<tr>");
                writer.println("<td>Dato mayor</td>");
                writer.println("</tr>");
                writer.println("<tr><td>");
                writer.println("<table >");
                writer.println("<tr>");
                writer.println("<td>"+CantmaxA+"</td>");
                writer.println("<td>"+CatmaxA+"</td>");
                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</td>");

                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</div>");
                writer.println("</div>");

                writer.println("<br>");

            } else {
                String CatminD= datosGRA[Contdatos-1].getcantidad();
                String CantminD=datosGRA[Contdatos-1].getcategoria();
                String CatmaxD= datosGRA[1].getcantidad();
                String CantmaxD=datosGRA[1].getcategoria();
                writer.println("<div>");
                writer.println("<div style='float: left; margin: 0px 200px 0px 300px; padding: 10px; text-align: left; '>");
                writer.println("<table BORDER WIDTH=180% >");
                writer.println("<tr>");
                writer.println("<td>Dato menor</td>");
                writer.println("</tr>");
                writer.println("<tr>");
                writer.println("<td>");
                writer.println("<table>");
                writer.println("<tr>");
                writer.println("<td>"+CantminD+"</td>");
                writer.println("<td>"+CatminD+"</td>");
                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</td>");

                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</div>");
                writer.println("<div style='float: right; margin: -20px 400px 300px 10px; padding: 10px; text-align: left; '>");
                writer.println("<table BORDER WIDTH=180%>");
                writer.println("<tr>");
                writer.println("<td>Dato mayor</td>");
                writer.println("</tr>");
                writer.println("<tr><td>");
                writer.println("<table>");
                writer.println("<tr>");
                writer.println("<td>"+CantmaxD+"</td>");
                writer.println("<td>"+CatmaxD+"</td>");
                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</td>");

                writer.println("</tr>");
                writer.println("</table>");
                writer.println("</div>");
                writer.println("</div>");
            }

            writer.println("<hr "+ "align = " + " center" + " size = " + "4" + " width ="+ " 100% " + "color= " +" White" + " noshade>");
            writer.println("<br>");
            writer.println("<br>");
            writer.print("<div "+ "align =" + "center" + ">");
            writer.print(" <img " + " src= "+"inicial.png" + ">");
            writer.print("</div>");
            writer.println("<br>");

            writer.println("<h1>Datos sin ordenar :</h1>");
            writer.println("<div style= " + " text-align:center; " + ">");
            writer.println(" <table border= " + " 2 " + " width= " + " 50% " + " > ");
            writer.println("<thead>");
            writer.println("<tr>");
            writer.println("<th>Categoria</th>");
            writer.println("<th>Cantidad</th>");
            writer.println("</tr>");
            writer.println("</thead>");
            writer.println("<tbody>	");

            for (int i = 0; i < Contdatos; i++) {
                writer.println("<tr>");
                String categoria = aux[i].getcategoria();
                writer.println("<td>" + categoria + "</td>");

                String cantidad = aux[i].getcantidad();
                writer.println("<td>" + cantidad + "</td>");

                writer.println("</tr>");
            }

            writer.println("</tbody>");

            writer.println("</table>");
            writer.println("</div>");

            writer.println("<hr "+ "align = " + " center" + " size = " + "4" + " width ="+ " 100% " + "color= " +" White" + " noshade>");
            writer.println("<br>");

            writer.println("<h1>Datos ordenados : </h1>");
            writer.println("<div style= " + " text-align: center; " + " > ");
            writer.println(" <table border= " + "2" + " width= " + " 50% " + ">");
            writer.println("<thead>");
            writer.println("<tr>");
            writer.println("<th>Categoria</th>");
            writer.println("<th>Cantidad</th>");
            writer.println("</tr>");
            writer.println("</thead>");
            writer.println("<tbody>	");
            for (int i = 0; i < Contdatos; i++) {
                writer.println("<tr>");
                String categoria = datosGRA[i].getcategoria();
                writer.println("<td>" + categoria + "</td>");

                String cantidad = datosGRA[i].getcantidad();
                writer.println("<td>" + cantidad + "</td>");

                writer.println("</tr>");
            }
            writer.println("</tbody>");

            writer.println("</table>");
            writer.println("</div>");

            writer.println("<br>");

            writer.println("<br>");
            writer.print("<div "+ "align =" + "center" + ">");
            writer.print(" <img " + " src= "+"FINAL.png" + ">");
            writer.print("</div>");
            writer.println("<br>");

            writer.println("</body>");
            writer.println("</html>");
            writer.close();
            JOptionPane.showMessageDialog(null, "Se cre√≥ Reporte en la carpeta");
        } catch (Exception e2) {
            e2.getStackTrace();
        }
    }//GEN-LAST:event_reporActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
      
        if(asc.isSelected() && sort.isSelected()){
            String auxCAT;
String auxCANT;
       
        for (int i = 1; i < (Contdatos - 1); i++) {
            for (int j = 1; j < (Contdatos - 1); j++) {
                float num1=Float.parseFloat(datosGRA[j].getcantidad());
                float num2=Float.parseFloat(datosGRA[j + 1].getcantidad());
                if (num1 > num2) {
                    
                    auxCANT = datosGRA[j].getcantidad();
                    auxCAT = datosGRA[j].getcategoria();
                    
                    datosGRA[j].setcantidad(datosGRA[j + 1].getcantidad());
                    datosGRA[j].setcategoria(datosGRA[j + 1].getcategoria());
                   
                    datosGRA[j + 1].setcantidad(auxCANT);
                    datosGRA[j + 1].setcategoria(auxCAT);
                   
                }
            }
        }
 System.out.println("datos ordenados por su cantidad: ");
        System.out.println("                              ");
        for (int i =0; i<Contdatos; i++) {
            System.out.println(" su cantidad: " + datosGRA[i].getcantidad());
            System.out.println(" su categoria: " + datosGRA[i].getcategoria());
           
            System.out.println("                                     ");
        }
        
   JFreeChart barras=null;
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
       String Y =datosGRA[0].getcantidad();
       String X =datosGRA[0].getcategoria();
        title=jTextField2.getText();
        for (int i = 1; i < datosGRA.length-1; i++) {
        float cantidad=Float.parseFloat(datosGRA[i].getcantidad());
        String categoria=datosGRA[i].getcategoria();
        datos.addValue(cantidad, "", categoria);
    }
      
       barras=ChartFactory.createBarChart3D(title, X, Y, datos, PlotOrientation.VERTICAL, true,true,false);
      
       ChartPanel panel = new ChartPanel(barras);
       panel.setPreferredSize(new Dimension(400,200));
       jPanel2.setLayout(new BorderLayout());
       jPanel2.add(panel,BorderLayout.NORTH);
                pack();
                repaint();
       try {
            BufferedImage imagen4 = new BufferedImage(jPanel2.getWidth(), jPanel2.getHeight(), BufferedImage.TYPE_INT_ARGB);

            jPanel2.paint(imagen4.getGraphics());
            ImageIO.write(imagen4, "png", new File("final.png"));
        } catch (Exception e) {
        }
        }
        else if (des.isSelected() && sort.isSelected()){
             String auxCAT;
String auxCANT;      for (int i = 1; i < (Contdatos - 1); i++) {
            for (int j = 1; j < (Contdatos - 1); j++) {
                float num1=Float.parseFloat(datosGRA[j].getcantidad());
                float num2=Float.parseFloat(datosGRA[j + 1].getcantidad());
                if (num1 < num2) {

                    auxCANT = datosGRA[j].getcantidad();
                    auxCAT = datosGRA[j].getcategoria();
                    
                    
                    datosGRA[j].setcantidad(datosGRA[j + 1].getcantidad());
                    datosGRA[j].setcategoria(datosGRA[j + 1].getcategoria());
                   

                    datosGRA[j + 1].setcantidad(auxCANT);
                    datosGRA[j + 1].setcategoria(auxCAT);
                   
                }
            }
        }
 System.out.println("Datos ordenados por su cantidad: ");
        System.out.println("                                    ");
        for (int i =0; i<Contdatos; i++) {
            System.out.println(" Cantidad: " + datosGRA[i].getcantidad());
            System.out.println(" Categoria: " + datosGRA[i].getcategoria());
           
            System.out.println("                                  ");
        }
        
   JFreeChart barras=null;
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
       String Y =datosGRA[0].getcantidad();
       String X =datosGRA[0].getcategoria();
        title=jTextField2.getText();
        for (int i = 1; i < datosGRA.length-1; i++) {
        float cantidad=Float.parseFloat(datosGRA[i].getcantidad());
        String categoria=datosGRA[i].getcategoria();
        datos.addValue(cantidad, "", categoria);
    }
      
       barras=ChartFactory.createBarChart(title, X, Y, datos, PlotOrientation.VERTICAL, true,true,false);
      
       ChartPanel panel = new ChartPanel(barras);
       panel.setPreferredSize(new Dimension(400,200));
       jPanel2.setLayout(new BorderLayout());
       jPanel2.add(panel,BorderLayout.NORTH);
                pack();
                repaint();
       try {
            BufferedImage imagen4 = new BufferedImage(jPanel2.getWidth(), jPanel2.getHeight(), BufferedImage.TYPE_INT_ARGB);

            jPanel2.paint(imagen4.getGraphics());
            ImageIO.write(imagen4, "png", new File("final.png"));
        } catch (Exception e) {
        }
        }
        else if(asc.isSelected() && quick.isSelected()){
            int salto, j, k;
            float auxcant, auxcant2;
            String auxCANT;
            String auxCAT;

            salto = ((Contdatos - 1) / 2);
            while (salto > 0) {
                for (int i = salto + 1; i < Contdatos; i++) {
                    j = (i - salto);
                    while (j >= 1) {

                        auxcant = Float.parseFloat(datosGRA[j].getcantidad());
                        auxcant2 = Float.parseFloat(datosGRA[j + salto].getcantidad());

                        if (auxcant <= auxcant2) {
                            break;
                        } else {
                            auxCANT = datosGRA[j].getcantidad();
                            auxCAT = datosGRA[j].getcategoria();

                            datosGRA[j].setcantidad(datosGRA[j + salto].getcantidad());
                            datosGRA[j].setcategoria(datosGRA[j + salto].getcategoria());

                            datosGRA[j + salto].setcantidad(auxCANT);
                            datosGRA[j + salto].setcategoria(auxCAT);
                            j = j - salto;
                        }

                    }
                }
                salto = salto / 2;
            }

            for (int i = 0; i < datosGRA.length - 1; i++) {
                System.out.println(" su  Cantidad: " + datosGRA[i].getcantidad());
                System.out.println(" su Categoria: " + datosGRA[i].getcategoria());
                System.out.println("                                  ");

            }
             
   JFreeChart barras=null;
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
       String Y =datosGRA[0].getcantidad();
       String X =datosGRA[0].getcategoria();
        title=jTextField2.getText();
        for (int i = 1; i < datosGRA.length-1; i++) {
        float cantidad=Float.parseFloat(datosGRA[i].getcantidad());
        String categoria=datosGRA[i].getcategoria();
        datos.addValue(cantidad, "", categoria);
    }
      
       barras=ChartFactory.createBarChart(title, X, Y, datos, PlotOrientation.VERTICAL, true,true,false);
      
       ChartPanel panel = new ChartPanel(barras);
       panel.setPreferredSize(new Dimension(400,200));
       jPanel2.setLayout(new BorderLayout());
       jPanel2.add(panel,BorderLayout.NORTH);
                pack();
                repaint();
       try {
            BufferedImage imagen4 = new BufferedImage(jPanel2.getWidth(), jPanel2.getHeight(), BufferedImage.TYPE_INT_ARGB);

            jPanel2.paint(imagen4.getGraphics());
            ImageIO.write(imagen4, "png", new File("final.png"));
        } catch (Exception e) {
        }
        }
        else if(des.isSelected() && quick.isSelected()){
            int salto, j;
            float auxcant, auxcant2;
            String auxCANT;
            String auxCAT;

            salto = ((Contdatos- 1) / 2);
            while (salto > 0) {
                for (int i = salto + 1; i < Contdatos; i++) {
                    j = (i - salto);
                    while (j >= 1) {

                        auxcant = Float.parseFloat(datosGRA[j].getcantidad());
                        auxcant2 = Float.parseFloat(datosGRA[j + salto].getcantidad());

                        if (auxcant >= auxcant2) {
                            break;
                        } else {

                            auxCANT = datosGRA[j].getcantidad();
                            auxCAT = datosGRA[j].getcategoria();

                            datosGRA[j].setcantidad(datosGRA[j + salto].getcantidad());
                            datosGRA[j].setcategoria(datosGRA[j + salto].getcategoria());

                            datosGRA[j + salto].setcantidad(auxCANT);
                            datosGRA[j + salto].setcategoria(auxCAT);
                            j = j - salto;
                        }

                    }
                }
                salto = salto / 2;
            }

            for (int i = 0; i < datosGRA.length - 1; i++) {
                System.out.println(" u Cantidad: " + datosGRA[i].getcantidad());
                System.out.println(" su Categoria: " + datosGRA[i].getcategoria());
                System.out.println("                                     ");

            }
            //BUB();
   JFreeChart barras=null;
        DefaultCategoryDataset datos=new DefaultCategoryDataset();
       String Y =datosGRA[0].getcantidad();
       String X =datosGRA[0].getcategoria();
        title=jTextField2.getText();
        for (int i = 1; i < datosGRA.length-1; i++) {
        float cantidad=Float.parseFloat(datosGRA[i].getcantidad());
        String categoria=datosGRA[i].getcategoria();
        datos.addValue(cantidad, "", categoria);
    }
      
       barras=ChartFactory.createBarChart(title, X, Y, datos, PlotOrientation.VERTICAL, true,true,false);
      
       ChartPanel panel = new ChartPanel(barras);
       panel.setPreferredSize(new Dimension(400,200));
       jPanel2.setLayout(new BorderLayout());
       jPanel2.add(panel,BorderLayout.NORTH);
                pack();
                repaint();
       try {
            BufferedImage imagen4 = new BufferedImage(jPanel2.getWidth(), jPanel2.getHeight(), BufferedImage.TYPE_INT_ARGB);

            jPanel2.paint(imagen4.getGraphics());
            ImageIO.write(imagen4, "png", new File("final.png"));
        } catch (Exception e) {
        }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void desActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_desActionPerformed

    private void ascActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ascActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ascActionPerformed

    private void sortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new inicio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton asc;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JRadioButton des;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JRadioButton quick;
    private javax.swing.JButton repor;
    private javax.swing.JRadioButton sort;
    // End of variables declaration//GEN-END:variables
}
